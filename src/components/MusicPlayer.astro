---
interface Props {
  playlist: {
    id: string;
    title: string;
    artist: string;
    thumbnail: string;
  }[];
}

const { playlist } = Astro.props;
---

<div class="music-player-card">
  <div class="cover-art">
    <img id="main-player-thumbnail" src={playlist[0].thumbnail} alt="Carátula" />
  </div>
  <div class="song-info">
    <div id="main-player-title" class="song-title">{playlist[0].title}</div>
    <div id="main-player-artist" class="song-artist">{playlist[0].artist}</div>
  </div>
  <div class="controls">
    <button class="control-btn" onclick="playPrevious()">
      <i class="fas fa-backward"></i>
    </button>
    <button class="control-btn play-btn" onclick="playPause()">
      <i id="main-play-btn" class="fas fa-play"></i>
    </button>
    <button class="control-btn" onclick="playNext()">
      <i class="fas fa-forward"></i>
    </button>
  </div>
  <div id="player" style="display:none;"></div>
</div>

<style>
.music-player-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-radius: 1px;
  padding: 1px;
  width: 100%;
  height: 100%;
  max-width: none;
  margin: 0;
}

.cover-art {
  width: 100%;
  max-width: 400px;
  height: auto;
  aspect-ratio: 1;
  background: linear-gradient(135deg, #3a8dde 0%, #c471f5 100%);
  border-radius: 1.2rem;
  overflow: hidden;
  margin-bottom: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.cover-art img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 1.2rem;
}

.song-info {
  text-align: center;
  margin-bottom: 2rem;
  width: 100%;
}

.song-title {
  color: #fff;
  font-size: clamp(1.5rem, 4vw, 2.5rem);
  font-weight: bold;
  margin-bottom: 0.5rem;
}

.song-artist {
  color: #b3b3b3;
  font-size: clamp(1rem, 3vw, 1.5rem);
}

.controls {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 2rem;
  width: 100%;
  max-width: 400px;
}

.control-btn {
  background: none;
  border: none;
  color: #fff;
  font-size: clamp(1.5rem, 4vw, 2rem);
  cursor: pointer;
  transition: transform 0.2s;
}

.control-btn:active {
  transform: scale(0.95);
}

.play-btn {
  background: #fff;
  color: #181818;
  width: clamp(60px, 8vw, 80px);
  height: clamp(60px, 8vw, 80px);
  border-radius: 50%;
  font-size: clamp(1.8rem, 4vw, 2.5rem);
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 16px rgba(0,0,0,0.2);
  border: none;
  margin: 0 1.5rem;
  transition: background 0.2s, color 0.2s;
}

.play-btn:active {
  background: #b3b3b3;
  color: #fff;
}

@media (max-width: 768px) {
  .music-player-card {
    padding: 1.5rem 1rem 1rem 1rem;
  }

  .cover-art {
    max-width: 300px;
  }

  .controls {
    gap: 1rem;
  }
}
</style>

<script define:vars={{ playlist }}>
window.player = null;
window.currentVideoIndex = 0;

// Cargar la API de YouTube si aún no está cargada
if (!window.YT) {
  console.log('Cargando API de YouTube');
  const tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  tag.async = true;
  tag.defer = true;
  
  // Configurar el origen antes de cargar la API
  window.YT_CONFIG = {
    host: 'https://www.youtube.com',
    origin: window.location.origin || 'http://localhost:4321'
  };
  
  const firstScriptTag = document.getElementsByTagName('script')[0];
  if (firstScriptTag && firstScriptTag.parentNode) {
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  }
}

window.onYouTubeIframeAPIReady = function() {
  console.log('API de YouTube lista');
  initializePlayer();
};

function initializePlayer() {
  console.log('Inicializando reproductor con video:', playlist[0]?.id);
  const origin = window.location.origin || 'http://localhost:4321';
  console.log('Origen configurado:', origin);
  
  try {
    window.player = new YT.Player('player', {
      height: '0',
      width: '0',
      videoId: playlist[0]?.id,
      playerVars: {
        'autoplay': 1,
        'controls': 0,
        'playsinline': 1,
        'enablejsapi': 1,
        'origin': origin,
        'rel': 0,
        'showinfo': 0,
        'modestbranding': 1,
        'iv_load_policy': 3,
        'fs': 0,
        'disablekb': 1,
        'cc_load_policy': 0,
        'hl': 'es',
        'ad_preroll': 0,
        'ad_postroll': 0,
        'ad_channel': 0,
        'ad_type': 0,
        'ad_format': 0,
        'ad_placement': 0,
        'ad_platform': 0,
        'ad_region': 0,
        'ad_slot': 0,
        'ad_unit': 0,
        'ad_video': 0,
        'ad_zone': 0
      },
      events: {
        'onReady': onPlayerReady,
        'onStateChange': onPlayerStateChange,
        'onError': onPlayerError
      }
    });
  } catch (error) {
    console.error('Error al inicializar el reproductor:', error);
  }
}

function onPlayerError(event) {
  if (event.data === 2) {
    window.playNext();
  }
}

function onPlayerReady(event) {
  updateSongInfo();
  event.target.playVideo();
  updatePlayPauseButton();
}

function onPlayerStateChange(event) {
  updatePlayPauseButton();
  if (event.data === YT.PlayerState.ENDED) {
    window.playNext();
  }
}

window.playNext = function() {
  if (!window.player || !playlist.length) return;
  try {
    window.currentVideoIndex = (window.currentVideoIndex + 1) % playlist.length;
    const nextSong = playlist[window.currentVideoIndex];
    window.player.loadVideoById(nextSong.id);
    window.player.playVideo();
    updateSongInfo();
    updatePlayPauseButton();
  } catch (error) {
    handlePlayerError(error);
  }
};

window.playPrevious = function() {
  if (!window.player || !playlist.length) return;
  try {
    window.currentVideoIndex = (window.currentVideoIndex - 1 + playlist.length) % playlist.length;
    const prevSong = playlist[window.currentVideoIndex];
    window.player.loadVideoById(prevSong.id);
    window.player.playVideo();
    updateSongInfo();
    updatePlayPauseButton();
  } catch (error) {
    handlePlayerError(error);
  }
};

window.playPause = function() {
  if (!window.player) return;
  try {
    const state = window.player.getPlayerState();
    if (state === YT.PlayerState.PLAYING) {
      window.player.pauseVideo();
    } else {
      window.player.playVideo();
    }
    updatePlayPauseButton();
  } catch (error) {
    handlePlayerError(error);
  }
};

function updatePlayPauseButton() {
  const playBtn = document.getElementById('main-play-btn');
  if (playBtn && window.player) {
    const state = window.player.getPlayerState();
    playBtn.className = state === YT.PlayerState.PLAYING ? 'fas fa-pause' : 'fas fa-play';
  }
}

function updateSongInfo() {
  const thumbnail = document.getElementById('main-player-thumbnail');
  const title = document.getElementById('main-player-title');
  const artist = document.getElementById('main-player-artist');

  if (thumbnail && title && artist && window.currentVideoIndex !== undefined) {
    const currentSong = playlist[window.currentVideoIndex];
    if (currentSong) {
      const timestamp = new Date().getTime();
      thumbnail.src = `${currentSong.thumbnail}?t=${timestamp}`;
      title.textContent = currentSong.title;
      artist.textContent = currentSong.artist;
    }
  }
}

function handlePlayerError(error) {
  if (window.currentVideoIndex !== undefined) {
    const nextIndex = (window.currentVideoIndex + 1) % playlist.length;
    if (nextIndex !== window.currentVideoIndex) {
      window.currentVideoIndex = nextIndex;
      const nextSong = playlist[nextIndex];
      if (nextSong && window.player) {
        window.player.loadVideoById(nextSong.id);
      }
    }
  }
}
</script> 