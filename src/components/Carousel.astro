---
import { slides } from '../data/slides';
import { playlist } from '../data/playlist';
import MusicPlayer from './MusicPlayer.astro';

interface Props {
  interval?: number;
}

const { interval = 5000 } = Astro.props;

// Mensajes positivos
const positiveMessages = [
  '¬°Hoy es un gran d√≠a para brillar! ‚ú®',
  'Cada momento es una nueva oportunidad üåü',
  'Tu energ√≠a positiva es contagiosa üí´',
  'El √©xito comienza con una actitud positiva üåà',
  'Cada d√≠a es un regalo, disfr√∫talo al m√°ximo üéÅ',
  'La felicidad est√° en las peque√±as cosas üå∏',
  'Eres m√°s fuerte de lo que crees üí™',
  'El mundo es mejor contigo en √©l üåç',
  'Tu sonrisa ilumina el d√≠a de los dem√°s üòä',
  'La vida es hermosa, disfr√∫tala üå∫'
];

// Obtener mensaje aleatorio
const randomMessage = positiveMessages[Math.floor(Math.random() * positiveMessages.length)];

// Funci√≥n para obtener la comida seg√∫n la hora
function getMealByTime() {
  const hour = new Date().getHours();
  if (hour >= 6 && hour < 11) return { icon: 'ü•ê', text: 'Desayuno' };
  if (hour >= 11 && hour < 15) return { icon: 'üçΩÔ∏è', text: 'Almuerzo' };
  if (hour >= 15 && hour < 19) return { icon: 'üçµ', text: 'Once' };
  return { icon: 'üç≤', text: 'Cena' };
}

// Coordenadas del Hospital San Juan de Dios (Santiago, Chile)
const hospitalLocation = {
  lat: -33.4500,
  lon: -70.6667,
  appid: import.meta.env.OPENWEATHER_API_KEY,
  exclude: 'minutely,hourly,daily,alerts',
};
---
<link rel="stylesheet" href="src/styles/carousel.css"/>
<div class="carousel">
  <div class="carousel-track">
    {slides.map((slide, index) => (
      <div class="slide" data-index={index}>
        <div class="slide-content">
          {index === 0 ? (
            <>
              <h2>{randomMessage}</h2>
              <div class="columns-container">
                <div class="column">
                  <div class="time-container">
                    <i class="icon">üïí</i>
                    <p id="current-time"></p>
                  </div>
                </div>
                <div class="column">
                  <div class="meal-container">
                    <i class="icon">{getMealByTime().icon}</i>
                    <p>{getMealByTime().text}</p>
                  </div>
                </div>
              </div>
            </>
          ) : index === 1 ? (
            <>
              <h2>Ubicaci√≥n</h2>
              <div class="columns-container">
                <div class="column">
                  <div class="location-container">
                    <i class="icon">üè•</i>
                    <p>Hospital San Juan de Dios</p>
                  </div>
                </div>
                <div class="column">
                  <div class="weather-container">
                    <i class="icon" id="weather-icon">üå§Ô∏è</i>
                    <p id="temperature"></p>
                    <p id="weather-description"></p>
                  </div>
                </div>
              </div>
            </>
          ) : (
            <MusicPlayer playlist={playlist} />
          )}
        </div>
      </div>
    ))}
  </div>
</div>

<script define:vars={{ intervalTime: interval, hospitalLocation }}>
  let currentIndex = 0;
  const track = document.querySelector('.carousel-track');
  const slides = document.querySelectorAll('.slide');
  let intervalId = null;

  // Funci√≥n para actualizar la hora
  function updateTime() {
    const timeElement = document.getElementById('current-time');
    if (timeElement) {
      const now = new Date();
      timeElement.textContent = now.toLocaleTimeString('es-CL', {
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });
    }
  }

  // Funci√≥n para obtener el clima
  async function updateWeather() {
    try {
      console.log('Intentando obtener el clima...');
      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${hospitalLocation.lat}&lon=${hospitalLocation.lon}&appid=${hospitalLocation.appid}&units=metric&lang=es`);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Error completo:', {
          status: response.status,
          statusText: response.statusText,
          errorData: errorData
        });
        throw new Error(`Error HTTP: ${response.status} - ${JSON.stringify(errorData)}`);
      }
      
      const data = await response.json();
      console.log('Datos del clima recibidos:', data);
      
      const weatherIcon = document.getElementById('weather-icon');
      const temperature = document.getElementById('temperature');
      const description = document.getElementById('weather-description');
      
      if (weatherIcon && temperature && description) {
        // Actualizar icono seg√∫n el clima
        const weatherCode = data.weather[0].id;
        if (weatherCode >= 200 && weatherCode < 300) {
          weatherIcon.textContent = '‚õàÔ∏è';
        } else if (weatherCode >= 300 && weatherCode < 400) {
          weatherIcon.textContent = 'üåßÔ∏è';
        } else if (weatherCode >= 500 && weatherCode < 600) {
          weatherIcon.textContent = 'üåßÔ∏è';
        } else if (weatherCode >= 600 && weatherCode < 700) {
          weatherIcon.textContent = '‚ùÑÔ∏è';
        } else if (weatherCode >= 700 && weatherCode < 800) {
          weatherIcon.textContent = 'üå´Ô∏è';
        } else if (weatherCode === 800) {
          weatherIcon.textContent = '‚òÄÔ∏è';
        } else if (weatherCode > 800) {
          weatherIcon.textContent = '‚òÅÔ∏è';
        }
        
        temperature.textContent = `${Math.round(data.main.temp)}¬∞C`;
        description.textContent = data.weather[0].description;
      }
    } catch (error) {
      console.error('Error detallado al obtener el clima:', error);
      // Mostrar un mensaje de error en la interfaz
      const temperature = document.getElementById('temperature');
      const description = document.getElementById('weather-description');
      if (temperature && description) {
        temperature.textContent = '--¬∞C';
        description.textContent = 'Error al cargar el clima';
      }
    }
  }

  function updateCarousel() {
    if (track instanceof HTMLElement) {
      track.style.transform = `translateX(-${currentIndex * 100}%)`;
    }
    
    slides.forEach((slide, index) => {
      slide.classList.toggle('active', index === currentIndex);
    });
  }

  function nextSlide() {
    currentIndex = (currentIndex + 1) % slides.length;
    updateCarousel();
  }

  function prevSlide() {
    currentIndex = (currentIndex - 1 + slides.length) % slides.length;
    updateCarousel();
  }

  function startInterval() {
    intervalId = setInterval(nextSlide, intervalTime);
  }

  function stopInterval() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = null;
    }
  }

  // Agregar controles de navegaci√≥n
  const carousel = document.querySelector('.carousel');
  if (carousel) {
    const prevButton = document.createElement('button');
    prevButton.className = 'carousel-control prev';
    prevButton.innerHTML = '‚ùÆ';
    prevButton.onclick = () => {
      stopInterval();
      prevSlide();
      startInterval();
    };

    const nextButton = document.createElement('button');
    nextButton.className = 'carousel-control next';
    nextButton.innerHTML = '‚ùØ';
    nextButton.onclick = () => {
      stopInterval();
      nextSlide();
      startInterval();
    };

    carousel.appendChild(prevButton);
    carousel.appendChild(nextButton);
  }

  // Inicializar
  updateTime();
  setInterval(updateTime, 1000);
  updateWeather();
  setInterval(updateWeather, 300000); // Actualizar clima cada 5 minutos
  updateCarousel();
  startInterval();
</script>
